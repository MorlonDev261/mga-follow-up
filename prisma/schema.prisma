generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  tel            String?  @unique
  password       String?  @db.Text
  name           String  @db.VarChar(2048)
  image          String?  @db.VarChar(2048)
  coverPicture   String?  @db.VarChar(2048)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  emailVerified  DateTime?
  role           String   @default("USER")

  // Champs requis par NextAuth
  accounts      Account[]
  sessions      Session[]

  // Relations personnalisées
  entreprises   WorkRelation[]      @relation("EntrepriseWorkers")
  workers       WorkRelation[]      @relation("WorkerEntreprises")
  owners        CustomerRelation[]  @relation("OwnerCustomers")
  customers     CustomerRelation[]  @relation("CustomerOwners")
  
  // ✅ Relation avec `Purchase`
  purchases     Purchase[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String @unique
  access_token      String? 
  expires_at        Int?
  refresh_token     String?
  scope             String?
  token_type        String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // ✅ Index pour améliorer les performances
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // ✅ Index pour améliorer les performances
}

model WorkRelation {
  id           String   @id @default(cuid())
  worker       User     @relation("WorkerEntreprises", fields: [workerId], references: [id])
  entreprise   User     @relation("EntrepriseWorkers", fields: [entrepriseId], references: [id])
  workerId     String
  entrepriseId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([workerId, entrepriseId])
  @@index([workerId])
  @@index([entrepriseId])
}

model CustomerRelation {
  id         String   @id @default(cuid())
  customer   User     @relation("CustomerOwners", fields: [customerId], references: [id])
  owner      User     @relation("OwnerCustomers", fields: [ownerId], references: [id])
  customerId String
  ownerId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([customerId, ownerId])
  @@index([customerId])
  @@index([ownerId])
}

model Purchase {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ Ajout de `onDelete: Cascade`
  userId      String
  productName String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId]) // ✅ Index pour améliorer les requêtes
}
