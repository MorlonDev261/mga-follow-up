generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  SUB_OWNER
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  tel           String?   @unique
  password      String?   @db.Text
  name          String?   @db.VarChar(2048)
  image         String?   @db.VarChar(2048)
  coverPicture  String?   @db.VarChar(2048)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  role          String    @default("USER")

  // Auth
  accounts Account[]
  sessions Session[]

  // Relations personnalis√©es
  entreprises  WorkRelation[]     @relation("EntrepriseWorkers")
  workers      WorkRelation[]     @relation("WorkerEntreprises")
  owners       CustomerRelation[] @relation("OwnerCustomers")
  customers    CustomerRelation[] @relation("CustomerOwners")
  purchases    Purchase[]
  companyLinks CompanyUser[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  access_token      String?
  expires_at        Int?
  refresh_token     String?
  scope             String?
  token_type        String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ConversationHistory {
  id        Int      @id @default(autoincrement())
  userId    String
  role      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkRelation {
  id           String   @id @default(cuid())
  workerId     String
  entrepriseId String
  worker       User     @relation("WorkerEntreprises", fields: [workerId], references: [id])
  entreprise   User     @relation("EntrepriseWorkers", fields: [entrepriseId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([workerId, entrepriseId])
  @@index([workerId])
  @@index([entrepriseId])
}

model CustomerRelation {
  id         String   @id @default(cuid())
  customerId String
  ownerId    String
  customer   User     @relation("CustomerOwners", fields: [customerId], references: [id])
  owner      User     @relation("OwnerCustomers", fields: [ownerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([customerId, ownerId])
  @@index([customerId])
  @@index([ownerId])
}

model AssistantContext {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  productName String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  contact   String
  address   String
  nif       String?
  stat      String?
  desc      String
  logo      Json?
  owner     String
  createdAt DateTime @default(now())

  users    CompanyUser[]
  products Product[]
}

model CompanyUser {
  id        String @id @default(cuid())
  userId    String
  companyId String
  role      Role

  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Product {
  id        String       @id @default(cuid())
  name      String
  company   Company      @relation(fields: [companyId], references: [id])
  companyId String
  entries   StockEntry[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([companyId])
}

model StockEntry {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  identifier Int
  comment    String
  arrival    DateTime
  stockDate  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StockInfo {
  id    DateTime @id
  name  String?
  color String?
}

model Caisse {
  id    String @id @default(cuid())
  name  String
  color String
  value Int    @default(0)
}
